@model BorrowPageModel
@{
    bool isAuthenticated = User.Identity != null && User.Identity.IsAuthenticated;
    var firstName = User.FindFirst("FirstName")?.Value;
    bool foundBook = Model.book != null;
    Book book = null;

    if (foundBook) {
        book = Model.book;
    };

    ViewData["Title"] = foundBook ? $"You want to borrow {book.Title}" : "Book not found!";
}

<h1 style="text-align: center;">@ViewData["Title"]</h1>

@if (foundBook) {
    <h4 style="text-align: center;">@book.Description</h4>

}


<hr />

<div class="d-flex flex-column align-items-center justify-content-center">
    <h2>Book Status:@(book.Available ? " " : " NOT ")<span style="color: @(book.Available ? "green" : "red");">Available</span></h2>
</div>

<div style="display: flex; justify-content:center; padding: 10px;">
    <button style="margin: 5px; width: 150px;" class="btn btn-primary borrow-btn" onclick="goBack()">Go Back</button>
</div>
@if (foundBook && book.Available)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <form asp-action="BorrowBook" style="max-width: 300px; width: 100%;" method="post" asp-controller="Borrow">
            <div class="form-group">
                <label asp-for="Days" class="control-label text-center">Borrow Days</label>
                <input asp-for="Days" type="number" max="14" min="1" class="form-control" />
                <span asp-validation-for="Days" class="text-danger"></span>
            </div>

            <div class="form-group mt-3 d-flex justify-content-center">
                <input type="submit" value="Reserve Book" class="btn btn-primary" style="width: 100%" />
            </div>
        </form>
    </div>
}


<hr />
<div class="text-center">
    @await Component.InvokeAsync("BookList", new { count = 10 })
</div>



<script>
    function goBack() {
        window.history.back();
    }
</script>
